/**
 *      -- Java Garbage Collection
 * 
 * The Java Garbage Collector (GC) is an automatic memory management system within 
 * the Java Virtual Machine (JVM). Its primary function is to automatically reclaim 
 * memory occupied by objects that are no longer referenced by the running Java 
 * application, thus preventing memory leaks and simplifying memory management for 
 * developers.
 * 
 *      -- class
 * In Java, a class serves as a blueprint or a template for creating objects. 
 * It defines the structure and behavior that objects of that class will possess.
 *  Instances of a class are objects
 * 
 */

// Declare class
/* public */ class Counter {
    private int value;
    public void inc() {
        ++value;
    }
    public int getValue() {
        return value;
    }
}

// Declaring attribute
/* public */ class Foo {
    private int x;
    private float f = 0.0;
    private String name = "Anonymous";
}

// Declaring methods
/* public */ class Counter {
    public static final int MAX = 100;
    private int value;
    public void inc() {
        if (value < MAX) {
            ++value;
        }
    }
    public int getValue() {
        return value;
    }
}

/**
 *      -- Constructors
 * 
 * Role: Object initialization
 * Name must be the same as class name
 * Must not have return type
 * Every class should have at least one constructor
 *      if dont compiler will genarate the default constructor
 * Usually declared in public
 * One class can have more than one constructor
 *      it call constructor overloarding
 */


/**
 *      -- Deafault constructors
 * Always least one constructor in ever class
 * If we did not write the constructor, the default constructor is generated by the compiler.
 *      this constructor takes no argument
 *      the body is empty
 * 
 */

/* public */ class Date {
    private int year, month, day;
    
    public Date() { // <--- default constructor

    }
}

/**
 *      -- Objects
 * Objecs are instances of classes
 * Allocated on the heap by using the new operator
 * Constructor is invoked automaticaly on the new object
 * 
 */

// Eg: -
Counter conter = new Counter();

Date date1 =  new Date(2016, 9, 23);

Person person = new Person("Sachintha", "Piyathunga");


/**
 *      -- Packages
 * Halps to manage the large software systems
 * Contains: classes, sub-packeges
 * 
 */


/**
 *      -- Java Types
 *  - Primitive 
 *      * Logical - boolean
 *      * Textual - char
 *      * Integral -  byte, sort, int , long
 *      * Floating - doule, float
 * 
 */

/**
 *      -- Logical - boolean
 * Characteristics: 
 *  ● Literals: 
 *      − true
 *      − false
 * 
 * Examples: 
 *      − boolean cont = true;
 *      − boolean exists = false
 */


/**
 *      -- Textual - char
 * − Characteristics: ●
 * ● Represents a 16-bit Unicode character 
 * ● Literals are enclosed in single quotes (' ') 
 * ● Examples: − 'a'
 *      − '\t' - the letter a - the TAB character
 *      − '\u0041' - a specific Unicode character ('A') represented by
 *        4 hexadecimal digits
 * 
 */


/**
 *      -- Integral – byte, short, int, and long
 * 
 * − Characteristics: 
 *      ● Use three forms:  
 *          − Decimal: 67 
 *          − Octal: 0103 (1x8^2+0x8^1+3x8^0) 
 *          − Hexadecimal: 0x43
 * ● Default type of literal is int.
 * ● Literals with the L or l suffix are of type long.
 * 
 */


/**
 *      -- Floating Point – float and double
 * 
 * − Characteristics: ●
 *      Size: 
 *          − float – 4 byte 
 *          − double – 8 byte
 * ● Decimal point 
 *      − 9.65 (double, default type) 
 *      − 9.65f or 9.65F (float) 
 *      − 9.65D or 9.65d (double)
 * ● Exponential notation
 *      − 3.41E20 (double)
 * 
 */


/***
 *      --  JAVA Reference Type
 * 
 * public class MyDate {
    private int day = 26;
    private int month = 9;
    private int year = 2016;

    public MyDate(int day, int month, int year) {
        // Add the methods
    }
}

 */

 /**
  * The this Reference 
    ● Usage: 
        − To resolve ambiguity between instance variables and parameters
        − To pass the current object as a parameter to another method

  */

public class MyDate { 
    private int day = 26; 
    private int month = 9; 
    private int year = 2016;
    
    public MyDate( int day, int month, int year) { 
        this.day = day; 
        this.month = month; 
        this.year = year;
    }

    public MyDate( MyDate date) { 
        this.day = date.day; 
        this.month = date.month; 
        this.year = date.year;
    }

    public MyDate creteNextDate(int moreDays) { 
        MyDate newDate = new MyDate(this); 
        //... add moreDays 
        return newDate;
    }
}


// Parameter Passing / Pass-by-Value

public class PassTest { 
    public void changePrimitive(int value) { 
        ++value;
    }
    
    public void changeReference(MyDate from, MyDate to) { 
        from = to;
    }
    
    public void changeObjectDay(MyDate date, int day) { 
        date.setDay( day );
    }
}


// Parameter Passing / Pass-by-Value

























public class Jtut1 {
    
}
